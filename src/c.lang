<?xml version="1.0" encoding="UTF-8"?>
<!-- <!DOCTYPE language SYSTEM "language.dtd"> -->
<language name="C" version="1.0" section="Sources" mimetypes="text/x-c;x-c-header">
	
	<line-comment name = "Line Comment" style= "Comment">
		<start-regex>//</start-regex>
	</line-comment>

	<block-comment name = "Block Comment" style = "Comment">
		<start-regex>/\*</start-regex>
        	<end-regex>\*/</end-regex>
	</block-comment>

	<block-comment name = "'#if 0' Comment" style = "Comment">
		<start-regex>^#if 0</start-regex>
        	<end-regex>^#endif</end-regex>
	</block-comment>


	<string name = "String" style = "String" end-at-line-end = "TRUE">
		<start-regex>"</start-regex>
		<end-regex>"</end-regex>
	</string>

	<syntax-item name = "Include/Pragma" style = "Preprocessor">
		<start-regex>^#\ *\t*\(include\|pragma\)</start-regex>
	         <end-regex>\(\n\)</end-regex>
	</syntax-item>

	<keyword-list name = "Keywords" style = "Keyword" case-sensitive="TRUE">
		<keyword>asm</keyword>
		<keyword>break</keyword>
		<keyword>case</keyword>
		<keyword>continue</keyword>
		<keyword>default</keyword>
		<keyword>do</keyword>
      		<keyword>else</keyword>
      		<keyword>enum</keyword>
		<keyword>extern</keyword>
		<keyword>for</keyword>
		<keyword>goto</keyword>
		<keyword>if</keyword>
		<keyword>return</keyword>
		<keyword>sizeof</keyword>
		<keyword>struct</keyword>
		<keyword>switch</keyword>
		<keyword>typedef</keyword>
		<keyword>union</keyword>
		<keyword>while</keyword>
	</keyword-list>

	<keyword-list name = "Types" style = "Data Type" case-sensitive="TRUE">
		<keyword>auto</keyword>
		<keyword>char</keyword>
		<keyword>const</keyword>
		<keyword>double</keyword>
		<keyword>float</keyword>
		<keyword>int</keyword>
		<keyword>long</keyword>
		<keyword>register</keyword>
		<keyword>short</keyword>
		<keyword>signed</keyword>
		<keyword>static</keyword>
		<keyword>unsigned</keyword>
		<keyword>void</keyword>
		<keyword>volatile</keyword>
	</keyword-list>

	<pattern-item name = "Character String" style = "Character">
		<regex>&apos;\\?[a-zA-Z0-9_\\()#@!$%^&amp;*-=+&quot;{}&lt;&gt;]&apos;</regex>
	</pattern-item>

	<pattern-item name = "Decimal" style = "Decimal">
		<regex>\b\([0-9]\|\([1-9][0-9]*\)\)\([Ll][Ll]?[Uu]?\|[Uu][Ll]?[Ll]?\)\b</regex>
	</pattern-item>

	<pattern-item name = "Floating Point Number" style = "Floating Point">
		<regex>\(.\b[0-9]+\([Ll]?\|[Ff]?\)\b\)\|\(b[0-9]*\.\W\)</regex>
	</pattern-item>

	<pattern-item name = "Octal Number" style = "Base-N Integer">
		<regex>\b0[0-7]+\b</regex>
	</pattern-item>

	<pattern-item name = "Hex Number" style = "Base-N Integer">
		<regex>\b0[xX][0-9a-fA-F]+\b</regex>
	</pattern-item>

	<pattern-item name = "Bin Number" style = "Base-N Integer">
		<regex>\b0[01]+\b</regex>
	</pattern-item>

	<keyword-list name = "Common Macro" style = "Preprocessor" case-sensitive="TRUE">
		<keyword>NULL</keyword>
		<keyword>TRUE</keyword>
		<keyword>FALSE</keyword>
		<keyword>MAX</keyword>
		<keyword>MIX</keyword>
	</keyword-list>

	<keyword-list name = "Preprocessor Definitions" style = "Preprocessor" case-sensitive="TRUE"
		match-empty-string-at-beginning = "FALSE"
		match-empty-string-at-end = "TRUE"
		beginning-regex = "^[ \t]*#[ \t]*">
		<keyword>if</keyword>
		<keyword>ifdef</keyword>
		<keyword>ifndef</keyword>
		<keyword>else</keyword>
		<keyword>elif</keyword>
		<keyword>define</keyword>
		<keyword>endif</keyword>
		<keyword>undef</keyword>
	</keyword-list>

</language>
